# import matplotlib.pyplot as plt

# # Hypothetical list of valence and arousal values
# valence = [0.8, 0.6, 0.2, 0.4, 0.9, 0.3, 0.7, 0.5, 0.1, 0.6]
# arousal = [0.7, 0.5, 0.8, 0.3, 0.6, 0.4, 0.9, 0.2, 0.6, 0.5]

# # Plot the data
# plt.figure(figsize=(8, 6))
# plt.scatter(valence, arousal, color='blue')
# plt.title('Valence vs. Arousal')
# plt.xlabel('Valence')
# plt.ylabel('Arousal')
# plt.xlim(0, 1)
# plt.ylim(0, 1)

# # Draw axis lines
# plt.axvline(x=0.5, color='gray', linestyle='--')
# plt.axhline(y=0.5, color='gray', linestyle='--')

# # Quadrant labels
# plt.text(0.2, 0.7, 'Quadrant I', fontsize=12)
# plt.text(0.2, 0.2, 'Quadrant III', fontsize=12)
# plt.text(0.7, 0.7, 'Quadrant II', fontsize=12)
# plt.text(0.7, 0.2, 'Quadrant IV', fontsize=12)

# plt.grid(True)
# plt.show()


# Given list
values = [25, 30, 20, 35, 40, 28, 15, 29, 31, 27,31]

# Modify the list based on the condition
atrisk_values = [0 if value < 20 else 1 for value in values]

print(atrisk_values)



# import matplotlib.pyplot as plt
# import numpy as np

# # Hypothetical list of valence and arousal values
# valence = [0.8, 0.6, 0.2, 0.4, 0.9, 0.3, 0.7, 0.5, 0.1, 0.6, 0.6]
# arousal = [0.7, 0.5, 0.8, 0.3, 0.6, 0.4, 0.9, 0.2, 0.6, 0.5, 0.2]

# # Determine the quadrant for each data point
# quadrants = []
# for v, a in zip(valence, arousal):
#     if v >= 0.5 and a >= 0.5:
#         quadrants.append("Quadrant I")
#     elif v < 0.5 and a >= 0.5:
#         quadrants.append("Quadrant II")
#     elif v < 0.5 and a < 0.5:
#         quadrants.append("Quadrant III")
#     else:
#         quadrants.append("Quadrant IV")

# # Calculate the proportion of tracks in each quadrant
# quadrant_counts = {q: quadrants.count(q) for q in set(quadrants)}
# total_tracks = len(quadrants)
# proportions = {q: count / total_tracks for q, count in quadrant_counts.items()}

# # Create boxplots for each quadrant
# plt.figure(figsize=(10, 6))
# plt.bar(proportions.keys(), proportions.values(), color='skyblue')
# plt.title('Proportion of Tracks in Each Quadrant(valence arousal)')
# plt.xlabel('Quadrant')
# plt.ylabel('Proportion of Tracks')
# plt.ylim(0, 1)  # Set y-axis limits from 0 to 1
# plt.grid(axis='y', linestyle='--', alpha=0.7)
# plt.show()




import numpy as np
import matplotlib.pyplot as plt

# Hypothetical list of valence and arousal values
# valence = [0.8, 0.6, 0.2, 0.4, 0.9, 0.3, 0.7, 0.5, 0.1, 0.6, 0.6]
valence=  [0.0312368093552193, 0.0280192611128199, 0.024118388063978, 0.0412347277992109, 0.0401613588928793, 0.0335850148293871, 0.0399127289377289, 0.0412952299245024, 0.0387002761408979, 0.0337569978632478, 0.0288262803804941, 0.0410376727094561, 0.0371748784077819, 0.0421040691759918, 0.0375594405594405, 0.0328092878577179, 0.0348110938108213, 0.0452691250330425, 0.0284675564011959, 0.0442648019277508, 0.0354174679487179, 0.0357915433464555, 0.0335675950486295, 0.0329769643400078, 0.038728075228736, 0.033899889366133, 0.0357157296922629, 0.0350460837976085, 0.0356161424782114, 0.0406994236311239, 0.0382586136720009, 0.0384460063224446, 0.0378792026831729, 0.0407589773755656, 0.0469996948623332, 0.0352836915665201, 0.0333068552036199, 0.0320001906008193, 0.0348198423224285, 0.0355316623005477, 0.0306857607282184, 0.0396939501039501, 0.0386277580309838, 0.0401613588928793, 0.0327754836022394, 0.0357860813532017, 0.0418877626699629, 0.0274751082251082, 0.0469996948623332, 0.0365729442970822, 0.0393284110050533, 0.0421098901098901, 0.0317194377775111, 0.0458923197586727, 0.0479658599827139, 0.0275689833558254, 0.0458923197586727, 0.0291565705128205, 0.0303903207493613, 0.0430839591949269, 0.0325866943866943, 0.0370876843608151, 0.0359084042489187, 0.0337639071294559, 0.0364441440138808, 0.029266190134386, 0.0391662906114855, 0.0388752747252747, 0.0351627030449865, 0.0316363572597615, 0.0342723492723492, 0.0342808407635948, 0.0403230995285151, 0.0436814181424901, 0.0408700777352361, 0.0328126585988861, 0.0380798795510539, 0.0326910654562828, 0.0363415170195657, 0.0342796412831727, 0.0287514832317941, 0.0369469895258475, 0.0347741584879328, 0.0297702544031311, 0.04151147123609, 0.0398903993110142, 0.0378375868894719, 0.0358619601412292, 0.0384747773183482, 0.0446877719231595, 0.0436372067234737, 0.0398605443205443, 0.0383976385746606, 0.0311090405075575, 0.047634448342103, 0.0330751348533611, 0.0345065250607419, 0.0411342229199372, 0.0384638881865874, 0.0369368827176335, 0.0384497961033076, 0.0361745808578804, 0.0430554336602994, 0.0360702170849951, 0.0390773897335541, 0.0394245784363822, 0.0347185821724207, 0.0309912008854454, 0.0444512346602813, 0.0484926301016537, 0.0411637308353158, 0.0392449468258628, 0.0384710705490366, 0.043732387077325, 0.0324777947884771, 0.0429777151909875, 0.0453791208791208, 0.0397712632971291, 0.0410001801069021, 0.0358200494472174, 0.0442616371712613, 0.0382226283641916, 0.0337661158594491, 0.0329631447431401, 0.0382715611466281, 0.0485938892008235, 0.030952734503613, 0.0318079602431788, 0.0377381745120551, 0.0351537907886086, 0.0395263811134669, 0.035286556923902, 0.0387502151748391, 0.042249714884208, 0.0414944806944028, 0.0320738806877599, 0.0517983763576848, 0.0439066781089093, 0.0362089375316484, 0.0375574855252274, 0.0374027015719323, 0.0309438279569892, 0.032090362275672, 0.0392064079126236, 0.0368882478104755, 0.0332130222463374, 0.03773412305693, 0.0363344720496894, 0.0305595671981776, 0.0432452082066028, 0.0419463029133875, 0.0310763446969696, 0.0388759076002531, 0.0383066163481612, 0.0349046810642324, 0.0445789903027126, 0.0373055222467655, 0.0417890662292089, 0.0386668059310231, 0.0295538967030162, 0.0347159669983013, 0.0449379451038575, 0.0272019980818414, 0.0504175388118143, 0.0462178414218113, 0.0479654347755736, 0.0400335757364628, 0.0483686745151826, 0.0275666253101736, 0.0414199538053938, 0.0447329639536364, 0.0307858842226577, 0.0388488661627389, 0.0285037170555853, 0.0381125693893735, 0.0461146570192812, 0.03482715, 0.0396083973940277, 0.040726523076923, 0.0378879710960583, 0.0325178241953486, 0.0459413309333474, 0.0133441342196897, 0.034285439419627, 0.0381831675874769, 0.0346982537360698, 0.0361819212316128, 0.0384220490825571, 0.0427434871592735, 0.0426534745447788, 0.0470195274279171, 0.0459613417880334, 0.0411480998714888, 0.0453580419580419, 0.0319170505425355, 0.0438095964691046, 0.0354722210184182, 0.0390689477955098, 0.0452057843311422, 0.0416814630049761, 0.0369112724516862, 0.032506745729518, 0.0512248583658567, 0.038531523973784, 0.0453422934736243, 0.0446291678878793, 0.043, 0.0386861550616883, 0.0410705596633084, 0.0387758593178645, 0.0447934482321632, 0.038630241163236, 0.0350849547984428, 0.0410696002788752, 0.0377496956281128, 0.0432452082066028, 0.0399228843977051, 0.0512570026525198]
#sorted midpoint:  0.0382715611466281
# Average: 0.03799469912827522

# arousal = [0.7, 0.5, 0.8, 0.3, 0.6, 0.4, 0.9, 0.2, 0.6, 0.5, 0.2]
arousal=[0.0388762257268533, 0.0355513941424402, 0.0412284984803675, 0.051740745698064, 0.0479481883308576, 0.0479367948551513, 0.0504065934065934, 0.048324371733277, 0.0523052598895436, 0.0456428418803418, 0.0415704223751921, 0.0470497533888616, 0.0510388557532317, 0.0501171562720087, 0.0468883449883449, 0.0494437219131962, 0.0480094080306614, 0.0528033306899286, 0.0413914386673397, 0.0544439469037578, 0.0411372863247863, 0.0522150991829736, 0.0422527851458885, 0.0405771141901576, 0.050130943747882, 0.0485442752397067, 0.0457638100810148, 0.0480820159862726, 0.0469484653277756, 0.0585803413877189, 0.0547556077000923, 0.0461718651211801, 0.0448890627982439, 0.0548568778280542, 0.0466697629860913, 0.0471832701572343, 0.0401052036199095, 0.0424573182180245, 0.0481513262599469, 0.0472674446296737, 0.0357532622286685, 0.0445414449064449, 0.0466799486955938, 0.0479481883308576, 0.0453441829296678, 0.0528703987112364, 0.051516217333109, 0.0544088689088689, 0.0466697629860913, 0.0435357029177718, 0.0434800673778775, 0.0384217857142857, 0.0453345772830913, 0.0540623891402714, 0.0567347203358439, 0.0363384840305892, 0.0540623891402714, 0.0306786858974358, 0.0428594379789951, 0.0498159647091259, 0.0500377713097713, 0.0479237564484193, 0.0450686309336791, 0.0386034240150093, 0.0475652689415847, 0.0379549958128962, 0.048231433759859, 0.0509368131868131, 0.0544826276086118, 0.0592326397007248, 0.0409002925452925, 0.04621747857628, 0.0471463960472776, 0.0480300121670947, 0.048782844104111, 0.0415852372178719, 0.0535743224746783, 0.0447963807931199, 0.0428177432323773, 0.0501178830888858, 0.0393815236576894, 0.0470717164095055, 0.0446711591553782, 0.0424465979226253, 0.0515646937666275, 0.0507786809476288, 0.0433681093771578, 0.0448268482789779, 0.0530176997759522, 0.0475457227333542, 0.0545555075677989, 0.046077859005859, 0.0475602106900452, 0.0411486528865165, 0.0545744591998663, 0.0460003622909206, 0.040562005986524, 0.0466045421245421, 0.0417840907654383, 0.0445885132707503, 0.0457189867902826, 0.0422575912159009, 0.0515375980898296, 0.0468056820624268, 0.0451726448893572, 0.0540765673519122, 0.0418548145063597, 0.0437823413417806, 0.0511622867404968, 0.0524351361705355, 0.0463443122191382, 0.0483755464213479, 0.0506127486237867, 0.0486239561875094, 0.0483001829344497, 0.0644903626122161, 0.0475950972104818, 0.0419578650818786, 0.047467167383221, 0.0350592167747352, 0.0450566100260875, 0.0498650143157091, 0.0486086134852801, 0.0392944755846032, 0.0478071767374716, 0.054982623058207, 0.0475476023186095, 0.0453139718589395, 0.0442659154310281, 0.0471853967265303, 0.044384677323296, 0.050412173195536, 0.0430735847048479, 0.0491867799371581, 0.0530042502244836, 0.04560129331939, 0.05617778808957, 0.060867061944141, 0.0468996460893983, 0.0423440860215053, 0.0454191978961209, 0.0428150432864626, 0.0458089790751358, 0.0410395413209581, 0.0458793757243003, 0.0524866004424224, 0.0445378090668266, 0.045233463666768, 0.0411198265288242, 0.0471874135928772, 0.053593638336585, 0.0439305254953379, 0.0456746706173407, 0.0505398499366557, 0.0480616921778173, 0.0524946104704494, 0.0432619722309876, 0.0587210867782101, 0.0448461907102482, 0.0425150325629901, 0.046639541373453, 0.0564046735905044, 0.0383622438766476, 0.0583083640867182, 0.0511509409045889, 0.0511379459132929, 0.0434528617692525, 0.0535098144549853, 0.0490176799007444, 0.0467995787459523, 0.0509686566140521, 0.0410513830224551, 0.0464348599377501, 0.0433007674282652, 0.047718038404894, 0.0528693075710416, 0.0442619692307692, 0.0505433445544222, 0.0427913846153846, 0.0463022526180378, 0.0502285209904102, 0.0489172181340109, 0.0102933896802785, 0.044117296337184, 0.0483118855361949, 0.0422208752431649, 0.03361780605789, 0.0539806093444661, 0.0510779647372729, 0.0433836863619472, 0.0478546372436764, 0.0524872321595089, 0.0503582155314852, 0.0517832167832167, 0.0423908643113572, 0.0472387767969735, 0.0449817840375586, 0.0467588876635941, 0.0535858589447504, 0.0484186999410887, 0.0535911216369837, 0.0393195522794037, 0.0545123309832556, 0.0474233552259399, 0.0497732582112896, 0.0509533878660307, 0.0472431476569407, 0.0494445614959178, 0.0515717991957452, 0.0499178547968885, 0.053348042073248, 0.0534981870920957, 0.0483289109802786, 0.0454478990737359, 0.0470707229088524, 0.0471874135928772, 0.0467514292348325, 0.0561180371352785]
#sorted midpoint:  0.0472387767969735
# Average: 0.04723788058347635

"""
# Determine the quadrant for each data point
quadrants = []
for v, a in zip(valence, arousal):
    if v >=0.5  and a >= 0.5:
        quadrants.append("Quadrant I")
    elif v < 0.5 and a >= 0.5:
        quadrants.append("Quadrant II")
    elif v < 0.5 and a < 0.5:
        quadrants.append("Quadrant III")
    else:
        quadrants.append("Quadrant IV")

# Given list k10
# k10 = [25, 30, 20, 35, 40, 28, 15, 29, 31, 27, 31]
k10=[12, 37, 40, 28, 20, 16, 31, 15, 39, 15, 22, 16, 26, 33, 17, 34, 15, 30, 34, 24, 33, 14, 18, 15, 22, 17, 22, 28, 15, 25, 40, 13, 18, 22, 47, 26, 17, 29, 14, 21, 25, 28, 13, 28, 33, 35, 24, 27, 34, 34, 29, 38, 32, 17, 25, 32, 31, 19, 30, 33, 30, 17, 23, 23, 26, 32, 21, 20, 21, 25, 22, 25, 27, 21, 13, 22, 29, 24, 39, 12, 28, 17, 20, 12, 12, 16, 13, 26, 24, 16, 39, 46, 19, 42, 31, 44, 40, 37, 21, 21, 35, 24, 44, 22, 19, 11, 27, 26, 27, 19, 14, 33, 20, 17, 31, 23, 17, 35, 17, 17, 10, 18, 31, 31, 20, 23, 19, 26, 19, 24, 16, 35, 25, 12, 19, 19, 18, 20, 41, 24, 34, 15, 25, 22, 15, 25, 14, 30, 27, 26, 24, 13, 28, 27, 16, 34, 28, 16, 21, 28, 18, 43, 25, 26, 30, 18, 29, 25, 18, 32, 14, 34, 45, 12, 16, 24, 28, 21, 25, 28, 30, 16, 21, 10, 21, 15, 14, 17, 33, 12, 15, 17, 25, 19, 32, 27, 25, 25, 11, 43, 12, 24, 17, 34, 36, 42, 45, 37, 16, 17, 17, 24, 34, 43, 27, 24, 33, 26]
# Average: 24.61467889908257


# Modify the list based on the condition
atrisk_values = [0 if value < 25 else 1 for value in k10]






# Initialize dictionaries to store proportions for binary values in each quadrant
binary_proportions = {}
for q in set(quadrants):
    binary_proportions[q] = {'At Risk': 0, 'Not at Risk': 0}

# Calculate proportions of binary values in each quadrant
for i, (q, atrisk) in enumerate(zip(quadrants, atrisk_values)):
    binary_proportions[q]['At Risk'] += atrisk
    binary_proportions[q]['Not at Risk'] += 1 - atrisk

# Calculate proportions for each quadrant
for q in binary_proportions:
    total = binary_proportions[q]['At Risk'] + binary_proportions[q]['Not at Risk']
    binary_proportions[q]['At Risk'] /= total
    binary_proportions[q]['Not at Risk'] /= total

# Create separate bar plots for each quadrant for 1's (At Risk)
plt.figure(figsize=(12, 8))
plt.subplot(2, 1, 1)  # Create top subplot
for q in set(quadrants):
    plt.bar(q, binary_proportions[q]['At Risk'], color='red', label='At Risk')
    plt.text(q, binary_proportions[q]['At Risk'], f'{binary_proportions[q]["At Risk"]:.2f}', ha='center', va='bottom')

plt.title('Proportions (At Risk) k>=25 in Each Quadrant (valence vs arousal)')
# plt.xlabel('Quadrant')
plt.ylabel('Proportion')
plt.legend()
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Create separate bar plots for each quadrant for 0's (Not at Risk)
plt.subplot(2, 1, 2)  # Create bottom subplot
for q in set(quadrants):
    plt.bar(q, binary_proportions[q]['Not at Risk'], color='blue', label='Not at Risk')
    plt.text(q, binary_proportions[q]['Not at Risk'], f'{binary_proportions[q]["Not at Risk"]:.2f}', ha='center', va='bottom')

plt.title('Proportions of (Not at Risk) k<25 in Each Quadrant (valence vs arousal)')
# plt.xlabel('Quadrant')
plt.ylabel('Proportion')
plt.legend()
plt.grid(axis='y', linestyle='--', alpha=0.7)

plt.tight_layout()  # Adjust layout to prevent overlap
plt.savefig('valence_arousal_.png')
plt.show()

"""
x=valence
y=arousal


# Create scatter plot
plt.figure(figsize=(8, 6))

# Divide plot area into quadrants
plt.axhline(0.5, color='gray', linestyle='--')  # Horizontal line dividing top and bottom quadrants
plt.axvline(0.5, color='gray', linestyle='--')  # Vertical line dividing left and right quadrants

# Plot points in each quadrant
for xi, yi in zip(x, y):
    plt.scatter(xi, yi,color='red')

plt.xlim(0, 1)  # Set x-axis limit from 0 to 1
plt.ylim(0, 1)  # Set y-axis limit from 0 to 1
plt.xlabel('Valence')
plt.ylabel('Arousal')
plt.title('Scatter Plot with Quadrants (0 to 1 Range)')
plt.legend()
plt.grid(True)
plt.savefig('valence_arousal_scatterplt.png')
plt.show()