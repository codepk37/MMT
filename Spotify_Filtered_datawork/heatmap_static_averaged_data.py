import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import csv
# # Load data from CSV files
# music_data = pd.read_csv("users_features_count_30000_100.csv")
# k10_data = pd.read_csv("TOBEUSED_jatin_aggregateScores_of_spotify_user.csv")

# # Merge dataframes on 'Coded' column
# merged_data = pd.merge(music_data, k10_data, on='Coded')

# # Drop irrelevant columns
# merged_data.drop(columns=['time_signature','Coded', 'Age', 'Gender', 'Healthy', 'Unhealthy', 'IRI-PT', 'IRI-FS', 
#                           'IRI-EC', 'IRI-PDS', 'HSPS-EOE', 'HSPS-AES', 'HSPS-LST', 'SSQ-SO', 
#                           'SSQ-Family', 'SSQ-Friends', 'SSQ', 'SWLS'], inplace=True)

# # Compute Spearman correlation matrix
# spearman_corr_matrix = merged_data.corr(method='spearman')

# # Visualize the correlation matrix using a heatmap
# plt.figure(figsize=(12, 8))
# heatmap = sns.heatmap(spearman_corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
# plt.title('Spearman Correlation Heatmap')
# plt.savefig("spearman_heatmap.png")
# plt.show()


# Load data from CSV files
df1 = pd.read_csv("users_features_count_30000_100.csv")

danceability=df1['danceability'].tolist()
energy=df1['energy'].tolist()
loudness = df1['loudness'].tolist()
mode = df1['mode'].tolist()
speechiness = df1['speechiness'].tolist()
acousticness = df1['acousticness'].tolist()
instrumentalness = df1['instrumentalness'].tolist()
liveness = df1['liveness'].tolist()
valence = df1['valence'].tolist()
tempo = df1['tempo'].tolist()
duration_ms = df1['duration_ms'].tolist()

df2= pd.read_csv("TOBEUSED_jatin_aggregateScores_of_spotify_user.csv")

Age  = df2['Age'].tolist()
Healthy = df2['Healthy'].tolist()
Unhealthy = df2['Unhealthy'].tolist()
K10 = df2['K10'].tolist()
SSQ_Family = df2['SSQ-Family'].tolist()
SSQ_Friends = df2['SSQ-Friends'].tolist()
SWLS = df2['SWLS'].tolist()



import matplotlib.pyplot as plt
import seaborn as sns

#below is taken accoring (sumof all all dynamic session)/(total session)
RI_sorted =[0.2624896552347275, 0.28936993502194713, 0.34561518632010596, 0.4630820395807337, 0.19387090912935206, 0.16498511583446976, 0.3634583007092113, 0.18712365624025878, 0.16874733807670836, 0.09735211020040742, 0.32676052541718503, 0.24962864960993417, 0.10805582895240605, 0.1800674288881729, 0.1566952845588527, 0.1368162887841946, 0.15269765020624382, 0.13794008776695763, 0.2218374989768464, 0.15913386954905653, 0.15489408070920674, 0.06698226548100676, 0.10525655722971922, 0.18272433858721715, 0.14129815440037452, 0.13426296588901743, 0.23797603475086354, 0.3678312334539113, 0.3336939452988047, 0.588152751595026, 0.1193220940640051, 0.6557871868915298, 0.17436261118251167, 0.12139874211656679, 0.6843824531214333, 0.16018797475329338, 0.205221624899951, 0.40451703663534544, 0.19972525786771786, 0.14610277439935526, 0.197039522147171, 0.35743195838605435, 0.10409469277482651, 0.19387090912935206, 0.16023634376129878, 0.2957266670529747, 0.24849251173992318, 0.2452745977088865, 0.6843824531214333, 0.10986086485977788, 0.11187445887445888, 0.23934607887831924, 0.21704241920089315, 0.09459213612726786, 0.2625624431898341, 0.23812635265811335, 0.09459213612726786, 0.5779165303848132, 0.21523160797945753, 0.13355589161081105, 0.07702562690675549, 0.19495756214476315, 0.21176764782298282, 0.16076054441966778, 0.2004781498665902, 0.20240035293910122, 0.1640961922954949, 0.2307065250342561, 0.21504610619487616, 0.23058254982688994, 0.13183079555498486, 0.3367404136296874, 0.19321487869403967, 0.11710022635645487, 0.11903926932462289, 0.14569866955346417, 0.23048828148123057, 0.19027335587799218, 0.20426770054695387, 0.19594701816607532, 0.19027468738613118, 0.11969863785058905, 0.1839806759666363, 0.16810499866351575, 0.14656534926718728, 0.20678887009482097, 0.02910213101237465, 0.26623209876243065, 0.1626196197556368, 0.16072523856860793, 0.18882000092541287, 0.20902233111653543, 0.23984113120851125, 0.24402020089915138, 0.1416316377678846, 0.24141216434941767, 0.2323200662021406, 0.3294351613593845, 0.08095227060098044, 0.1601189212593121, 0.1050732858333842, 0.15581049716207426, 0.1389003785968157, 0.21191477158303282, 0.1858064047051856, 0.24705330721739435, 0.19215062668711, 0.21404606579735466, 0.10253059055379013, 0.12637432267428045, 0.3772349088551812, 0.10740121868761618, 0.18339317848491446, 0.12637456623374993, 0.12811352845656515, 0.24858749286458579, 0.1778076590935552, 0.21109902447311374, 0.21493907229211384, 0.1174245586179526, 0.19705652014801256, 0.15670164266098086, 0.318658569329732, 0.30255190796899417, 0.19670805941686947, 0.21059208580969657, 0.2631275759277829, 0.18765376577536805, 0.1819950458886693, 0.3128668286453374, 0.07975000401513206, 0.23936223407042623, 0.2306831528277086, 0.2457904997531027, 0.11669329000351158, 0.21895596253008537, 0.329906974823833, 0.2977221967114779, 0.16411883722042492, 0.2047054700317299, 0.20585645508288722, 0.18332985552636769, 0.0992271728702806, 0.12153723732586713, 0.10992374948326164, 0.18600850180120335, 0.29575379347478276, 0.18207876072144716, 0.16288731635931689, 0.15279012651658527, 0.1542617541472855, 0.24805881390066256, 0.570765837280074, 0.09448868033287806, 0.1170429056638789, 0.2915499046208282, 0.13557945103675453, 0.40445202032820043, 0.14142948804153938, 0.1409970021002778, 0.08374213037266293, 0.17230121563526024, 0.4054107828907561, 0.14691899732932387, 0.08368276459649508, 0.41843192280043134, 0.09947691860316246, 0.11578003045704342, 0.15972098457208947, 0.2452810103958424, 0.43491514585003926, 0.2876161293873813, 0.1786778364155751, 0.2915495235512776, 0.12470801213247557, 0.15867521013379857, 0.3569972087175517, 0.21901824520506152, 0.15946758391580124, 0.12625767855537995, 0.12027953749105542, 0.17080518903968037, 0.613664460115389, 0.10506128886497788, 0.17553033644831467, 0.20455088667774055, 0.12096525656076251, 0.4874893112563358, 0.15089661327206352, 0.10603851430537606, 0.10749570482339108, 0.23424385645087042, 0.16812553036299643, 0.14207130425880427, 0.15677098074139625, 0.09784602851882941, 0.20178851543026305, 0.44231913510932724, 0.17532168868807765, 0.14937864744538235, 0.5921755278549837, 0.12716386088283765, 0.159942750930405, 0.27295307827613974, 0.19433624425977034, 0.25331319710585176, 0.09829009433962263, 0.17104010281425597, 0.20659562845368737, 0.38478817215358396, 0.31596084526591983, 0.2890806635004038, 0.3082425307438465, 0.28374663395963345, 0.05692491899573734, 0.15279012651658527, 0.05555596529652332, 0.1788433850583907]
# RI_sorted=[0.6616161616161617, 0.5059101654846335, 0.41740674955595025, 0.6070336391437309, 0.15725190839694655, 0.09392265193370165, 0.4230769230769231, 0.37593984962406013, 0.23157894736842105, 0.375, 0.5593952483801296, 0.34226190476190477, 0.12931034482758622, 0.2625, 0.46153846153846156, 0.1324200913242009, 0.3269230769230769, 0.14814814814814814, 0.31130063965884863, 0.21755725190839695, 0.5, 0.1015625, 0.3548387096774194, 0.3240223463687151, 0.16875, 0.20481927710843373, 0.3052434456928839, 0.5035971223021583, 0.7272727272727273, 0.9166666666666666, 0.10606060606060606, 0.8722222222222222, 0.2540983606557377, 0.23404255319148937, 0.835820895522388, 0.3103448275862069, 0.40963855421686746, 0.5954887218045113, 0.4329896907216495, 0.13636363636363635, 0.46464646464646464, 0.4782608695652174, 0.22522522522522523, 0.15725190839694655, 0.21204188481675393, 0.38686131386861317, 0.21834862385321102, 0.4965034965034965, 0.835820895522388, 0.2222222222222222, 0.3076923076923077, 0.5733333333333334, 0.3956043956043956, 0.25, 0.5208333333333334, 0.4307692307692308, 0.25, 0.782608695652174, 0.4787234042553192, 0.29411764705882354, 0.2, 0.32460732984293195, 0.22884615384615384, 0.38636363636363635, 0.34328358208955223, 0.340080971659919, 0.16233766233766234, 0.5, 0.3151750972762646, 0.6511627906976745, 0.15625, 0.497029702970297, 0.21978021978021978, 0.36, 0.19753086419753085, 0.2754491017964072, 0.423728813559322, 0.3181818181818182, 0.4473684210526316, 0.3623853211009174, 0.4270833333333333, 0.04150943396226415, 0.15517241379310345, 0.15441176470588236, 0.09897610921501707, 0.2948717948717949, 0.10714285714285714, 0.5722222222222222, 0.16615384615384615, 0.16727272727272727, 0.20967741935483872, 0.4472049689440994, 0.6179775280898876, 0.3420523138832998, 0.2636363636363636, 0.3474025974025974, 0.36363636363636365, 0.6086956521739131, 0.2462686567164179, 0.18699186991869918, 0.1652892561983471, 0.2356687898089172, 0.35714285714285715, 0.3048327137546468, 0.3448275862068966, 0.2471264367816092, 0.3684210526315789, 0.2634508348794063, 0.37254901960784315, 0.3582887700534759, 0.738562091503268, 0.2, 0.20783132530120482, 0.20212765957446807, 0.12962962962962962, 0.675531914893617, 0.3333333333333333, 0.2559055118110236, 0.33067729083665337, 0.1702127659574468, 0.34177215189873417, 0.41, 0.6869565217391305, 0.4396551724137931, 0.1111111111111111, 0.2962962962962963, 0.3201663201663202, 0.15576923076923077, 0.15699658703071673, 0.4297253634894992, 0.07547169811320754, 0.3954802259887006, 0.34545454545454546, 0.34459459459459457, 0.1388888888888889, 0.29444444444444445, 0.726605504587156, 0.35714285714285715, 0.22608695652173913, 0.25, 0.22777777777777777, 0.1731958762886598, 0.1746987951807229, 0.23295454545454544, 0.13095238095238096, 0.4129032258064516, 0.6588235294117647, 0.25, 0.36082474226804123, 0.10687022900763359, 0.2088888888888889, 0.40948275862068967, 0.8616504854368932, 0.15151515151515152, 0.0659025787965616, 0.6445497630331753, 0.13432835820895522, 0.6494082840236687, 0.2462686567164179, 0.12661498708010335, 0.06896551724137931, 0.09090909090909091, 0.6144927536231884, 0.1317365269461078, 0.18666666666666668, 0.6222826086956522, 0.11811023622047244, 0.14782608695652175, 0.16666666666666666, 0.35, 0.6708407871198568, 0.3465783664459161, 0.23333333333333334, 0.3016845329249617, 0.1342281879194631, 0.4, 0.6666666666666666, 0.2206405693950178, 0.4, 0.12371134020618557, 0.1956521739130435, 0.10787172011661808, 0.950920245398773, 0.29411764705882354, 0.24545454545454545, 0.39316239316239315, 0.09762532981530343, 0.7824675324675324, 0.28488372093023256, 0.0625, 0.4, 0.3127035830618892, 0.4014084507042254, 0.25, 0.1871508379888268, 0.11827956989247312, 0.20588235294117646, 0.6968503937007874, 0.06607929515418502, 0.16172506738544473, 0.8037974683544303, 0.3225806451612903, 0.3201581027667984, 0.33766233766233766, 0.16363636363636364, 0.33495145631067963, 0.0, 0.09859154929577464, 0.2736318407960199, 0.5172413793103449, 0.58125, 0.5186915887850467, 0.4400921658986175, 0.35845896147403683, 0.11594202898550725, 0.10687022900763359, 0.10900473933649289, 0.2727272727272727]
# above is taken (session>=0.5)/(all session>0)  ,no benefit

# Define the variables in the first set
variables_set1 = [
    danceability,
    energy,
    loudness,
    mode ,
    speechiness, 
    acousticness, 
    instrumentalness, 
    liveness ,
    valence ,
    tempo ,
    duration_ms,
    RI_sorted #added now
]

# Define the variables in the second set
variables_set2 = [
    Age ,
    Healthy,
    Unhealthy,
    K10,
    SWLS ,
    SSQ_Family,
    SSQ_Friends
   
]

# print("k10 --",K10)
# print("valence --",valence)
# print("arousal --",energy)

from scipy import stats
# Calculate Spearman correlation for each pair of variables
correlation_matrix = np.zeros((len(variables_set1), len(variables_set2)))
p_values_matrix = np.zeros((len(variables_set1), len(variables_set2)))

for i, var1 in enumerate(variables_set1):
    for j, var2 in enumerate(variables_set2):
        correlation_coefficient, p_value = stats.spearmanr(var1, var2)
        correlation_matrix[i, j] = correlation_coefficient
        p_values_matrix[i, j] = p_value

# Transpose the correlation matrix
correlation_matrix_transposed = correlation_matrix.T

# Create a mask where True indicates significant p-values (p < 0.06)
significant_mask = p_values_matrix < 0.06

# Create a custom annotation matrix with stars for significant p-values and empty strings for others
annotation_matrix = [['*' if sig else '' for sig in row] for row in significant_mask]

# Create the heatmap with custom annotations and transposed representation
plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix_transposed, annot=True, fmt=".2f", cmap="coolwarm", 
            yticklabels=[ 'Age','Healthy','Unhealthy','K10','SWLS','SSQ_Family','SSQ_Friends' ], 

            xticklabels=[ 'dancea','energy','loudnes','mode','speechi','acoustic','instrum', 
                        'liveness' ,'valence','tempo' ,'duration',' RI_avg']) #instrumentalness
plt.title("Spearman Correlation Heatmap for Static session(Avg_RI)")


# Loop through cells and annotate significant p-values with stars
for i in range(len(variables_set2)):
    for j in range(len(variables_set1)):
        if p_values_matrix[j, i] < 0.06:
            plt.text(j + 0.5, i + 0.5, "*", ha="center", va="center", color="black")

plt.ylabel("* represents significant p < 0.05".upper(),fontsize=12)
plt.savefig("ishan_ofavg_Static_pvalStarri_rename.png")
plt.show()




